/*
 * Copyright (C) 2005-present, 58.com.  All rights reserved.
 * Use of this source code is governed by a BSD type license that can be
 * found in the LICENSE file.
 */

// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

class WidgetData {
  WidgetData._(this._bc, this._bcOffset);
  factory WidgetData(List<int> bytes) {
    var rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WidgetData> reader = _WidgetDataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get className =>
      const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  List<int> get data => const fb.ListReader<int>(fb.Uint8Reader())
      .vTableGet(_bc, _bcOffset, 6, null);
  List<int> get na => const fb.ListReader<int>(fb.Uint8Reader())
      .vTableGet(_bc, _bcOffset, 8, null);
  List<int> get pa => const fb.ListReader<int>(fb.Uint8Reader())
      .vTableGet(_bc, _bcOffset, 10, null);

  @override
  String toString() {
    return 'WidgetData{className: $className, data: $data, na: $na, pa: $pa}';
  }
}

class _WidgetDataReader extends fb.TableReader<WidgetData> {
  const _WidgetDataReader();

  @override
  WidgetData createObject(fb.BufferContext bc, int offset) =>
      WidgetData._(bc, offset);
}

class WidgetDataBuilder {
  WidgetDataBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addClassNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addDataOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addNaOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addPaOffset(int offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WidgetDataObjectBuilder extends fb.ObjectBuilder {
  final String? _className;
  final List<int>? _data;
  final List<int>? _na;
  final List<int>? _pa;

  WidgetDataObjectBuilder({
    String? className,
    List<int>? data,
    List<int>? na,
    List<int>? pa,
  })  : _className = className,
        _data = data,
        _na = na,
        _pa = pa;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final classNameOffset = fbBuilder.writeString(_className);
    final dataOffset =
        _data?.isNotEmpty == true ? fbBuilder.writeListUint8(_data) : null;
    final naOffset =
        _na?.isNotEmpty == true ? fbBuilder.writeListUint8(_na) : null;
    final paOffset =
        _pa?.isNotEmpty == true ? fbBuilder.writeListUint8(_pa) : null;

    fbBuilder.startTable();
    if (classNameOffset != null) {
      fbBuilder.addOffset(0, classNameOffset);
    }
    if (dataOffset != null) {
      fbBuilder.addOffset(1, dataOffset);
    }
    if (naOffset != null) {
      fbBuilder.addOffset(2, naOffset);
    }
    if (paOffset != null) {
      fbBuilder.addOffset(3, paOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    var fbBuilder = fb.Builder();
    var offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
